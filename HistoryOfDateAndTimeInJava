****************************DATE AND TIME API IN JAVA*******************************


===> HISTORY OF DATE AND TIME IN JAVA <===

1) Pre-Java 1.1: The java.util.Date Class (since JDK 1.0)
================================================================================
- Introduced in JDK 1.0 (1996) to represent both date and time.
- Intended to handle time representation and basic operations.
- Design Flaws:

   a) Mutable → Not Thread-Safe
   -------------------------------------------
   - Date objects are mutable (can be modified after creation).
   - This makes them unsafe to use across multiple threads.
   - Example:
        Date date = new Date();
        date.setTime(date.getTime() + 3600000); // adds 1 hour
   - If shared between threads, this can cause race conditions.

   b) Confusing and Deprecated Methods
   -------------------------------------------
   - Early methods like getYear(), getMonth(), getDate() were confusing:
        - getYear() returns the year minus 1900
        - getMonth() is zero-based (January = 0)
   - These methods were deprecated in Java 1.1 in favor of Calendar.
   - Example:
        Date date = new Date(); // May 3, 2025
        System.out.println(date.getYear());   // 125
        System.out.println(date.getMonth());  // 4
   - These results are misleading and lead to bugs.

   c) Poor Internationalization (i18n) Support
  -------------------------------------------
   - No built-in way to format or parse dates for different locales.
   - No support for different calendar systems (like Hijri, Buddhist, etc.).
   - Needed additional classes like DateFormat and Locale for formatting.
   - Example:
        Date date = new Date();
        DateFormat df = DateFormat.getDateInstance(DateFormat.LONG, Locale.FRANCE);
        System.out.println(df.format(date));
   - Still limited and clunky compared to modern APIs.

   d) Mixed Responsibilities (Poor Separation of Concerns)
  -------------------------------------------
   - java.util.Date combines:
        * Date logic
        * Time logic
        * Time zone logic
   - Internally stores time in milliseconds since epoch (UTC).
   - Displays date/time in system’s local time zone by default.
   - Example:
        Date date = new Date(0); // epoch time
        System.out.println(date); // Output varies by system time zone
   - This creates confusion about whether a Date is local or UTC.
   - Should have separated Instant, LocalDate, and ZonedDateTime as in modern APIs.

- Result:
   - Due to all these flaws, java.util.Date is considered outdated.
   - Most of its methods were deprecated in Java 1.1.
   - Calendar class was introduced in Java 1.1 to address some of these issues (but it too had problems).


2) Java 1.1: Calendar and TimeZone Classes (1997)
=================================================================================================
- Introduced in JDK 1.1 to improve upon java.util.Date.
- Added java.util.Calendar and java.util.TimeZone classes.
- Aimed to fix Date’s limitations like internationalization and time zone handling.

- Advantages:

   a) Support for Different Locales and Time Zones
   ---------------------------------------------------
   - Calendar and TimeZone classes support localization.
   - Can set specific time zones (like "America/New_York", "Asia/Kolkata").
   - Example:
        Calendar cal = Calendar.getInstance(TimeZone.getTimeZone("UTC"));
        System.out.println(cal.getTime());  // displays UTC time

   b) Field-Based Access (YEAR, MONTH, DAY, etc.)
   ---------------------------------------------------
   - Replaces confusing getYear()/getMonth() from Date.
   - Uses named constants: Calendar.YEAR, Calendar.MONTH, etc.
   - Example:
        Calendar cal = Calendar.getInstance();
        int year = cal.get(Calendar.YEAR);
        int month = cal.get(Calendar.MONTH); // 0-based (January = 0)
        int day = cal.get(Calendar.DAY_OF_MONTH);

- Drawbacks:

   a) Still Mutable → Not Thread-Safe
   ---------------------------------------------------
   - Calendar objects are mutable and can be changed after creation.
   - Sharing between threads without synchronization is unsafe.
   - Example:
        cal.set(Calendar.HOUR, 10);  // modifies the same object

   b) Zero-Based Months (January = 0)
   ---------------------------------------------------
   - MONTH field starts at 0 (January = 0, December = 11)
   - Common source of bugs when formatting or parsing dates.
   - Example:
        cal.set(Calendar.MONTH, 4);  // May, not April

   c) Verbose and Error-Prone API
   ---------------------------------------------------
   - Requires many lines of code to do simple operations.
   - Setting a specific date is cumbersome.
   - Example:
        Calendar cal = Calendar.getInstance();
        cal.set(Calendar.YEAR, 2025);
        cal.set(Calendar.MONTH, 4); // May
        cal.set(Calendar.DAY_OF_MONTH, 3);
   - Complex date arithmetic increases chances of mistakes.

- Summary:
   - Calendar improved on Date with localization and named fields.
   - Still flawed due to mutability, verbosity, and confusing month handling.
   - Developers needed something simpler, immutable, and more intuitive.


3) Java 1.4: java.sql.Date, Time, and Timestamp
===================================================================================
- Introduced in JDK 1.4 to support database operations via JDBC.
- Part of the java.sql package.
- Designed to map SQL DATE, TIME, and TIMESTAMP types to Java.

- Classes:
   - java.sql.Date        → SQL DATE (year, month, day only)
   - java.sql.Time        → SQL TIME (hours, minutes, seconds only)
   - java.sql.Timestamp   → SQL TIMESTAMP (date + time + nanoseconds)

- All three classes extend java.util.Date.

- Purpose:
   - Provide a bridge between SQL types and Java types.
   - Enable setting and getting SQL-friendly date/time values in ResultSet, PreparedStatement, etc.

- Example:
     // Setting SQL date in PreparedStatement
     LocalDate localDate = LocalDate.of(2025, 5, 3);
     java.sql.Date sqlDate = java.sql.Date.valueOf(localDate);
     preparedStatement.setDate(1, sqlDate);

- Problems:

   a) Inheritance from java.util.Date — Causes Confusion
   -------------------------------------------------------------
   - These classes inherit methods from java.util.Date that don't apply.
   - Example:
        java.sql.Date sqlDate = java.sql.Date.valueOf("2025-05-03");
        System.out.println(sqlDate.getHours()); // exists, but meaningless!
   - Misleads developers into using invalid methods (e.g., getHours() on sql.Date).

   b) Redundant and Inconsistent Behavior
   -------------------------------------------------------------
   - java.sql.Date should represent only date, but it still has time fields from java.util.Date.
   - java.sql.Time should represent only time, but it still has date fields internally.
   - java.sql.Timestamp adds nanoseconds, but equals() and compareTo() ignore them.
   - Example:
        Timestamp t1 = Timestamp.valueOf("2025-05-03 10:15:30.123456789");
        Timestamp t2 = Timestamp.valueOf("2025-05-03 10:15:30.123456700");
        System.out.println(t1.equals(t2)); // may return true even though nanos differ!

- Summary:
   - Designed for JDBC SQL compatibility, but poor OO design.
   - Confusing to use due to inheritance and inconsistent method behavior.
   - Mostly replaced in modern Java by java.time types (LocalDate, LocalTime, LocalDateTime, Instant).

4) Workarounds Before Java 8: Third-Party Libraries
---------------------------------------------------------------
- Because java.util.Date and Calendar were flawed and difficult to use,
  many developers turned to third-party libraries for better date/time handling.

- Most popular workaround:
   a) Joda-Time (released in 2002)
   --------------------------------------------------
   - Designed by Stephen Colebourne.
   - Provided a clean, intuitive, and powerful API for date/time operations.
   - Features:
        * Immutable objects → thread-safe
        * Clear distinction between types: DateTime, LocalDate, LocalTime, etc.
        * Easy parsing, formatting, manipulation
        * Fluent API (method chaining)
   - Example:
        DateTime dt = new DateTime();                   // current date-time
        DateTime tomorrow = dt.plusDays(1);             // add 1 day
        String formatted = dt.toString("yyyy-MM-dd");   // format date

   - Became the de facto standard for date/time handling in Java before Java 8.
   - Widely used in enterprise and open-source projects.

- Other alternatives (less common):
   b) Apache Commons Lang DateUtils
   c) ICU4J (International Components for Unicode for Java)

- Limitations:
   - Added external dependencies to the project.
   - Couldn’t fully integrate with java.util.Date or Calendar without conversions.

- Result:
   - Joda-Time heavily influenced the design of the new java.time API in Java 8.
   - Joda-Time is now in maintenance mode and recommends using java.time instead.

- Summary:
   - Community-driven solutions like Joda-Time filled the gap left by poor native APIs.
   - Proved the need for a robust, modern, and built-in solution → Java 8’s java.time.

5) Java 8: java.time Package (JSR-310, 2014)
=======================================================================================
- Java 8 introduced a brand-new date and time API under the package java.time.
- Based on JSR-310 (Java Specification Request).
- Inspired heavily by Joda-Time.

- Key Goals:
   - Fix the design flaws of java.util.Date and Calendar.
   - Provide a modern, clean, immutable, and thread-safe API.
   - Better support for ISO-8601 and international calendars.

- Core Features:
   - All classes are immutable → thread-safe by default.
   - Fluent API → method chaining.
   - Clearly separated concepts → better type safety.
   - Built-in parsing, formatting, and temporal calculations.
   - Time zone and offset support via ZoneId and ZonedDateTime.

- Key Classes in java.time:
   ----------------------------------------------------------
   - LocalDate
        → Represents a date without time (e.g., 2025-05-03).
        → Example:
             LocalDate today = LocalDate.now();

   - LocalTime
        → Represents a time without date (e.g., 10:30:45).
        → Example:
             LocalTime now = LocalTime.now();

   - LocalDateTime
        → Represents both date and time, without time zone.
        → Example:
             LocalDateTime dt = LocalDateTime.of(2025, 5, 3, 10, 30);

   - ZonedDateTime
        → Date and time with time zone (e.g., 2025-05-03T10:30+05:30[Asia/Kolkata]).
        → Example:
             ZonedDateTime zdt = ZonedDateTime.now(ZoneId.of("Asia/Kolkata"));

   - Instant
        → A timestamp (number of seconds/milliseconds since Unix epoch).
        → Example:
             Instant now = Instant.now();

   - Duration / Period
        → Represents time differences.
        → Duration = time-based (e.g., hours, minutes, seconds).
        → Period = date-based (e.g., years, months, days).
        → Example:
             Period age = Period.between(LocalDate.of(1995, 5, 1), LocalDate.now());

   - DateTimeFormatter
        → Used to format and parse date/time objects.
        → Example:
             String formatted = LocalDate.now().format(DateTimeFormatter.ofPattern("dd-MM-yyyy"));

- Example Usage:
   ----------------------------------------------------------
   LocalDate today = LocalDate.now();
   LocalDate birthday = LocalDate.of(1995, 5, 1);
   Period age = Period.between(birthday, today);
   System.out.println("Age: " + age.getYears() + " years");

- Summary:
   ----------------------------------------------------------
   - java.time solved almost all the major issues of older APIs.
   - Clean, readable, accurate, immutable, and thread-safe.
   - Now the recommended standard for all new Java projects.
   - Replaces java.util.Date, java.util.Calendar, java.sql.Date, and even Joda-Time.

6) Interoperability Between Old and New APIs (with Examples)
=======================================================================================
Java 8 provides ways to convert between old (java.util.Date, java.util.Calendar)
and new (java.time) APIs using real-world examples.

-------------------------------------------------------------
1. Convert java.util.Date to java.time.Instant
-------------------------------------------------------------
   Date date = new Date();  // Suppose it is: Sat May 03 10:30:00 IST 2025
   Instant instant = date.toInstant();
   System.out.println(instant);  // Output: 2025-05-03T05:00:00Z

2. Convert java.time.Instant to java.util.Date
-------------------------------------------------------------
   Instant instant = Instant.parse("2025-05-03T05:00:00Z");
   Date date = Date.from(instant);
   System.out.println(date);  // Output: Sat May 03 10:30:00 IST 2025

3. Convert java.util.Date to LocalDateTime
-------------------------------------------------------------
   Date date = new Date();  // Sat May 03 10:30:00 IST 2025
   Instant instant = date.toInstant();
   ZoneId zoneId = ZoneId.of("Asia/Kolkata");
   LocalDateTime ldt = LocalDateTime.ofInstant(instant, zoneId);
   System.out.println(ldt);  // Output: 2025-05-03T10:30

4. Convert LocalDateTime to java.util.Date
-------------------------------------------------------------
   LocalDateTime ldt = LocalDateTime.of(2025, 5, 3, 10, 30);
   ZoneId zoneId = ZoneId.of("Asia/Kolkata");
   Instant instant = ldt.atZone(zoneId).toInstant();
   Date date = Date.from(instant);
   System.out.println(date);  // Output: Sat May 03 10:30:00 IST 2025

5. Convert java.util.Calendar to ZonedDateTime
-------------------------------------------------------------
   Calendar calendar = Calendar.getInstance();
   calendar.set(2025, Calendar.MAY, 3, 10, 30);
   ZonedDateTime zdt = calendar.toInstant().atZone(calendar.getTimeZone().toZoneId());
   System.out.println(zdt);  // Output: 2025-05-03T10:30+05:30[Asia/Kolkata]

6. Convert ZonedDateTime to java.util.Calendar
-------------------------------------------------------------
   ZonedDateTime zdt = ZonedDateTime.of(2025, 5, 3, 10, 30, 0, 0, ZoneId.of("Asia/Kolkata"));
   Calendar calendar = GregorianCalendar.from(zdt);
   System.out.println(calendar.getTime());  // Output: Sat May 03 10:30:00 IST 2025

7. Convert java.sql.Date to LocalDate
-------------------------------------------------------------
   java.sql.Date sqlDate = java.sql.Date.valueOf("2025-05-03");
   LocalDate localDate = sqlDate.toLocalDate();
   System.out.println(localDate);  // Output: 2025-05-03

8. Convert LocalDate to java.sql.Date
-------------------------------------------------------------
   LocalDate localDate = LocalDate.of(2025, 5, 3);
   java.sql.Date sqlDate = java.sql.Date.valueOf(localDate);
   System.out.println(sqlDate);  // Output: 2025-05-03

Notes:
-------------------------------------------------------------
- java.util.Date includes both date and time, and uses system default time zone.
- java.time.Instant is always in UTC (Z = Zulu time).
- java.time.LocalDateTime does NOT include any time zone info.
- java.time.ZonedDateTime combines date, time, and time zone in one class.
- Always specify ZoneId to avoid confusion in time zone-sensitive conversions.

7) Java 9 and Later Enhancements
=======================================================================================
- Java 9 and later versions (up to Java 21) brought small but useful enhancements
  to the java.time package introduced in Java 8.

1. Minor Enhancements to java.time Classes
---------------------------------------------------------------
   - Several classes in java.time were improved with more methods and better performance.

   Example:
   LocalDateTime dateTime = LocalDateTime.of(2025, 5, 3, 10, 30);
   long epochSeconds = dateTime.toEpochSecond(ZoneOffset.ofHours(5));
   System.out.println(epochSeconds);  // Output: 1746255600

   - toEpochSecond() now makes it easier to convert date-time to seconds since epoch.
   - toInstant() and toEpochMilli() enhancements for more precise conversion.

2. Updated Time Zone Database
---------------------------------------------------------------
   - Java regularly updates the tzdata (time zone database) to reflect changes in laws.
   - Helps in:
     * Accurate time calculations across zones.
     * Handling daylight saving time (DST) changes correctly.

   Example:
   ZonedDateTime zdt = ZonedDateTime.now(ZoneId.of("Europe/Paris"));
   System.out.println(zdt);  // Reflects latest DST rules

3. Compact Strings for Date-Time Formatting
---------------------------------------------------------------
   - Enhanced internal handling of string representations of dates.
   - Improves performance and memory usage.

   Example:
   DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
   String formatted = LocalDate.now().format(formatter);
   System.out.println(formatted);  // Output: 03-05-2025

4. Formatting Improvements
---------------------------------------------------------------
   - DateTimeFormatter now works better with localized styles.
   - More options for ISO, RFC, and custom formats.

   Example:
   DateTimeFormatter iso = DateTimeFormatter.ISO_DATE_TIME;
   System.out.println(LocalDateTime.now().format(iso));
   // Output: 2025-05-03T10:30:00

5. Future Enhancements (Java 17+)
---------------------------------------------------------------
   - Support for Japanese, Hijrah, Minguo, and Thai Buddhist calendars.
   - Better interop with other libraries (like ICU4J).
   - Ongoing improvements in formatting and parsing for various locales.

Summary:
---------------------------------------------------------------
   - Java 9+ improved usability, formatting, time zone handling, and conversions.
   - These changes are mostly internal but useful for developers needing precision and performance.
   - Java 8 remains the major shift, Java 9+ enhances it further.


===> Summary Table <===
==========================================================================

| Java Version | API/Classes Introduced        | Notes                                       |
|--------------|-------------------------------|---------------------------------------------|
| JDK 1.0      | java.util.Date                | Mutable, deprecated methods                 |
| JDK 1.1      | Calendar, TimeZone            | Locale/timezone support, but error-prone    |
| JDK 1.4      | java.sql.Date/Time/Timestamp | Database support, confusing inheritance     |
| JDK 8        | java.time (JSR-310)           | Clean, modern, immutable, thread-safe       |

===> Best Practice
===========================================================================
- Use java.time package (Java 8+) for all new development.
- Avoid legacy classes unless dealing with legacy systems.
- Use DateTimeFormatter for parsing/formatting dates.
