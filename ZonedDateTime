==========================>ZonedDateTime<============================================================

Definition:
=====================================================================
--ZonedDateTime represents a date and time with a time zone in the ISO-8601 calendar system.
--It combines LocalDateTime with a ZoneOffset and ZoneId, allowing for precise handling of date and time across different time zones.
--Standard Format:
     The standard format for ZonedDateTime is based on ISO-8601 and includes: YYYY-MM-DDTHH:MM:SS.sss±hh:mm[ZoneId]
         - Date and time in the format: yyyy-MM-dd'T'HH:mm:ss
         - Optional nanoseconds: .SSSSSSSSS
         - Time zone offset: ±hh:mm
         - Time zone ID: [Region/City]
--Example: 2025-05-10T17:30:45+05:30[Asia/Kolkata]


Interfaces implemeted by ZonedDateTime
========================================================================
--Serializable: Allows ZonedDateTime objects to be serialized, enabling them to be converted into a byte stream and saved or transmitted.

--Comparable<ChronoZonedDateTime<?>>: Enables comparison between ZonedDateTime instances and other ChronoZonedDateTime objects, facilitating sorting and ordering operations.

--ChronoZonedDateTime<LocalDate>: -Represents a date-time with a time-zone in an arbitrary chronology, intended for advanced globalization use cases.
                                  -Provides methods for accessing date-time fields (like year, month, day, hour, minute, second), adjusting the date-time,
                                   and converting to other date-time representations.

--Temporal: Defines methods for manipulating and querying date-time objects, such as adding or subtracting time units and accessing specific fields.

--TemporalAccessor: Provides methods for querying individual date-time fields, like year, month, day, hour, minute, second, etc., without modifying the underlying
                    date-time object.

Methods
===============================================================================

1)Creating instance
============================================================================================================
--ZonedDateTime zonedDateTime = ZonedDateTime.now();       //2025-05-10T17:30:45.000+05:30[Asia/Kolkata]
--ZonedDateTime zonedDateTime = ZonedDateTime.now(ZoneId.of("Asia/Kolkata"));   //2025-05-10T17:30:45.000+05:30[Asia/Kolkata]
--from LocalDateTime
   LocalDateTime localDateTime = LocalDateTime.of(2025, 5, 10, 15, 30);
   ZonedDateTime zonedDateTime = ZonedDateTime.of(localDateTime, ZoneId.of("Asia/Kolkata"));   //2025-05-10T15:30+05:30[Asia/Kolkata]
--from Instant and zoneId
   ZonedDateTime zonedDateTime = ZonedDateTime.ofInstant(Instant.now(), ZoneId.of("Asia/Kolkata"));   // 2025-05-10T17:30:45.000+05:30[Asia/Kolkata]
--from String
   ZonedDateTime zonedDateTime = ZonedDateTime.parse("2025-05-10T15:30:00+05:30[Asia/Kolkata]");     //2025-05-10T15:30+05:30[Asia/Kolkata]

2)Getting Components
=============================================================================================================
ZonedDateTime zdt = ZonedDateTime.now();  ////2025-05-10T17:30:45.000+05:30[Asia/Kolkata]

int year = zdt.getYear(); // 2025
int monthValue = zdt.getMonthValue(); // 5
Month month = zdt.getMonth(); // MAY
int dayOfMonth = zdt.getDayOfMonth(); // 10
int dayOfYear = zdt.getDayOfYear(); // 130
DayOfWeek dayOfWeek = zdt.getDayOfWeek(); // SATURDAY
int hour = zdt.getHour(); // 17
int minute = zdt.getMinute(); // 30
int second = zdt.getSecond(); // 45
int nano = zdt.getNano(); // 0

ZoneOffset offset = zdt.getOffset(); // +05:30
ZoneId zone = zdt.getZone(); // Asia/Kolkata


3)Manipulation of ZonedDateTime
================================================================================================================
ZonedDateTime now = ZonedDateTime.now();   // 2025-05-10T17:30:45.000+05:30[Asia/Kolkata]

ZonedDateTime future = now.plusDays(10);   // 2025-05-20T17:30:45.000+05:30[Asia/Kolkata]
ZonedDateTime nextYear = now.plusYears(1);   // 2026-05-10T17:30:45.000+05:30[Asia/Kolkata]
ZonedDateTime inFuture = now.plusMonths(2);   // 2025-07-10T17:30:45.000+05:30[Asia/Kolkata]
ZonedDateTime inFutureWeeks = now.plusWeeks(3);    // 2025-05-31T17:30:45.000+05:30[Asia/Kolkata]
ZonedDateTime inFutureHours = now.plusHours(5);   // 2025-05-10T22:30:45.000+05:30[Asia/Kolkata]
ZonedDateTime inFutureMinutes = now.plusMinutes(30);   // 2025-05-10T18:00:45.000+05:30[Asia/Kolkata]
ZonedDateTime inFutureSeconds = now.plusSeconds(120);    // 2025-05-10T17:32:45.000+05:30[Asia/Kolkata]
ZonedDateTime inFutureNanos = now.plusNanos(1000000000);    // 2025-05-10T17:30:46.000+05:30[Asia/Kolkata]

ZonedDateTime past = now.minusDays(10);    // 2025-05-01T17:30:45.000+05:30[Asia/Kolkata]
ZonedDateTime lastYear = now.minusYears(1);   // 2024-05-10T17:30:45.000+05:30[Asia/Kolkata]
ZonedDateTime inPast = now.minusMonths(2);    // 2025-03-10T17:30:45.000+05:30[Asia/Kolkata]
ZonedDateTime inPastWeeks = now.minusWeeks(3);   // 2025-04-19T17:30:45.000+05:30[Asia/Kolkata]
ZonedDateTime inPastHours = now.minusHours(5);    // 2025-05-10T12:30:45.000+05:30[Asia/Kolkata]
ZonedDateTime inPastMinutes = now.minusMinutes(30);    // 2025-05-10T17:00:45.000+05:30[Asia/Kolkata]
ZonedDateTime inPastSeconds = now.minusSeconds(120);     // 2025-05-10T17:28:45.000+05:30[Asia/Kolkata]
ZonedDateTime inPastNanos = now.minusNanos(1000000000);     // 2025-05-10T17:30:44.000+05:30[Asia/Kolkata]

ZonedDateTime withDayOfMonth = now.withDayOfMonth(15); // 2025-05-15T17:30:45.000+05:30[Asia/Kolkata]
ZonedDateTime withMonth = now.withMonth(12); // 2025-12-10T17:30:45.000+05:30[Asia/Kolkata]
ZonedDateTime withYear = now.withYear(2026); // 2026-05-10T17:30:45.000+05:30[Asia/Kolkata]
ZonedDateTime withMinute = now.withMinute(45); // 2025-05-10T17:45:45.000+05:30[Asia/Kolkata]
ZonedDateTime withSecond = now.withSecond(30); // 2025-05-10T17:30:30.000+05:30[Asia/Kolkata]
ZonedDateTime withNano = now.withNano(500000000); // 2025-05-10T17:30:45.500+05:30[Asia/Kolkata]

4)Comaprision methods
======================================================================================
ZonedDateTime now = ZonedDateTime.now(); // 2025-05-10T17:30:45.000+05:30[Asia/Kolkata]
ZonedDateTime anotherTime = ZonedDateTime.of(2025, 5, 10, 17, 30, 45, 0, ZoneId.of("Asia/Kolkata")); // 2025-05-10T17:30:45.000+05:30[Asia/Kolkata]
ZonedDateTime future = now.plusDays(10); // 2025-05-20T17:30:45.000+05:30[Asia/Kolkata]
ZonedDateTime past = now.minusDays(10); // 2025-05-01T17:30:45.000+05:30[Asia/Kolkata]

ZonedDateTime sameTime = now.withZoneSameInstant(ZoneId.of("America/New_York")); // 2025-05-10T08:00:45.000-04:00[America/New_York]
ZonedDateTime differentZone = now.withZoneSameLocal(ZoneId.of("Europe/London")); // 2025-05-10T17:30:45.000+01:00[Europe/London]
boolean isAfter = now.isAfter(past); // true
boolean isBefore = now.isBefore(future); // true
boolean isEqual = now.isEqual(sameTime); // true
boolean equals = now.equals(anotherTime); // true
int compareTo = now.compareTo(anotherTime); // 0

ZonedDateTime zdt1 = ZonedDateTime.of(2025, 5, 10, 17, 30, 0, 0, ZoneId.of("Asia/Kolkata"));
ZonedDateTime zdt2 = ZonedDateTime.of(2025, 5, 10, 17, 30, 0, 0, ZoneId.of("Europe/London"));
System.out.println(zdt1 == zdt2); // Output: false

5)ZonedDateTime and String conversions
===========================================================================================
ZonedDateTime zdt = ZonedDateTime.now(); // 2025-05-10T17:30:45.000+05:30[Asia/Kolkata]

--Convert to String
String isoZoned = zdt.format(DateTimeFormatter.ISO_ZONED_DATE_TIME); // 2025-05-10T17:30:45+05:30[Asia/Kolkata]
String isoDateTime = zdt.format(DateTimeFormatter.ISO_DATE_TIME); // 2025-05-10T17:30:45+05:30
String isoInstant = zdt.format(DateTimeFormatter.ISO_INSTANT); // 2025-05-10T12:00:45Z
String customFormat = zdt.format(DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm:ss VV O")); // 10-05-2025 17:30:45 Asia/Kolkata GMT+5:30
String customFormat2 = zdt.format(DateTimeFormatter.ofPattern("dd-MMM-yyyy hh:mm:ss a VV")); // 10-May-2025 05:30:45 PM Asia/Kolkata

--convert back to ZonedDateTime
String isoZoned = "2025-05-10T17:30:45+05:30[Asia/Kolkata]";
DateTimeFormatter formatter1 = DateTimeFormatter.ISO_ZONED_DATE_TIME;
ZonedDateTime zdt1 = ZonedDateTime.parse(isoZoned, formatter1); // 2025-05-10T17:30:45+05:30[Asia/Kolkata]

String customFormat = "10-05-2025 17:30:45 Asia/Kolkata GMT+5:30";
DateTimeFormatter formatter2 = DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm:ss VV O");
ZonedDateTime zdt2 = ZonedDateTime.parse(customFormat, formatter2); // 2025-05-10T17:30:45+05:30[Asia/Kolkata]

6)Other conversions
================================================================================================
ZonedDateTime zdt = ZonedDateTime.now(); // 2025-05-10T17:30:45.000+05:30[Asia/Kolkata]
LocalDate localDate = zdt.toLocalDate(); // 2025-05-10
LocalTime localTime = zdt.toLocalTime(); // 17:30:45.000
LocalDateTime localDateTime = zdt.toLocalDateTime(); // 2025-05-10T17:30:45.000

7)Period and Duration Calculations
=====================================================================================
ZonedDateTime start = ZonedDateTime.of(2025, 5, 3, 10, 0, 0, 0, ZoneId.of("Asia/Kolkata")); // 2025-05-03T10:00+05:30[Asia/Kolkata]
ZonedDateTime end = ZonedDateTime.of(2025, 5, 10, 15, 30, 0, 0, ZoneId.of("Asia/Kolkata")); // 2025-05-10T15:30+05:30[Asia/Kolkata]
Duration duration = Duration.between(start, end); // PT5DT5H30M
Period period = Period.between(start.toLocalDate(), end.toLocalDate()); // P7D

















