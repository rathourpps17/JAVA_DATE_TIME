Java 8 - LocalDate Study Notes
=======================================================

1)Definition:
===========================================================
-LocalDate is a part of the Java 8 Date and Time API (java.time.*) and represents a date 
 without time and timezone. 
-ISO 8601 — International Organization for Standardization, Standard Number 8601

 Example: 2025-05-02(yyyy-MM-dd)   --only format that LocalDate Understands


Interfaces Implemented by LocalDate class
========================================================================

1.Serializable: Allows LocalDate objects to be serialized, enabling them to be converted into a byte stream and saved or transmitted.

2.Comparable<ChronoLocalDate>: Enables comparison between LocalDate instances and other ChronoLocalDate objects, facilitating sorting and ordering operations.

3.ChronoLocalDate: Represents a date without time-of-day or time-zone in an arbitrary chronology, intended for advanced globalization use cases.
                    Provides methods for accessing date fields (like year, month, day), adjusting the date, and converting to other date-time representations.

4.Temporal: Defines methods for manipulating and querying date-time objects, such as adding or subtracting time units and accessing specific fields.

5.TemporalAccessor: Provides methods for querying individual date-time fields, like year, month, day, etc., without modifying the underlying date-time object.

6.TemporalAdjuster:Allows for adjusting a Temporal object (like LocalDate) by applying a specific adjustment, such as finding the next Monday or the last day of the month.


2)Import:
=================================================
import java.time.LocalDate;


3)METHODS:
================================================

Java 8 - LocalDate: Creating Instances
======================================
| Method                                                | Description                             |
|-------------------------------------------------------|-----------------------------------------|
| LocalDate.now()                                       | Gets the current date                   |
| LocalDate.of(int year, int month, int dayOfMonth)     | Creates a specific date                 |
| LocalDate.parse(CharSequence text)                    | Parses a date from a string             |

Examples:
---------------------------------------------------------
LocalDate today = LocalDate.now();  -- Gets the current date based on the system's clock.
LocalDate date = LocalDate.of(2025, 5, 2);  --Creates a date for May 2, 2025.
LocalDate parsed = LocalDate.parse("2025-05-02");  --Parses the date string into a LocalDate (ISO format: yyyy-MM-dd).

2) Getting Date Components:
=============================================
LocalDate date = LocalDate.of(2025, 5, 2);
date.getYear();        // 2025
date.getMonth();       // MAY
date.getMonthValue();  // 5
date.getDayOfMonth();  // 2
date.getDayOfWeek();   // FRIDAY
date.lengthOfMonth();  // 31
date.getDayOfYear()    //122


3)Java 8 - LocalDate Operations (Date Manipulation)
====================================================
LocalDate today = LocalDate.now();  // Current date (e.g., 2025-05-03)

String todayDate=today.toString();  //2025-05-03 (String)

LocalDate tomorrow = today.plusDays(1);      // Add 1 day to today //2025-05-11
LocalDate nextWeek = today.plusWeeks(1);     // Add 1 week to today //2025-05-17
LocalDate nextMonth = today.plusMonths(1);   // Add 1 month to today  //2025-06-10
LocalDate nextYear = today.plusYears(1);     // Add 1 year to today   //2026-05-10

LocalDate yesterday = today.minusDays(1);      // Subtract 1 day from today  //2025-05-09
LocalDate lastWeek = today.minusWeeks(1);      // Subtract 1 week from today  //2025-05-03
LocalDate lastMonth = today.minusMonths(1);    // Subtract 1 month from today  //2025-04-10
LocalDate lastYear = today.minusYears(1);      // Subtract 1 year from today  //2024-05-10

LocalDate today = LocalDate.of(2025, 5, 2);
LocalDate newDate = today.withDayOfMonth(15);   // 2025-05-15
LocalDate newDate = today.withMonth(12);    // 2025-12-02
LocalDate newDate = today.withYear(2023);   // 2023-05-02
LocalDate lastDayOfMonth = date.withDayOfMonth(date.lengthOfMonth());  //2025-05-31
LocalDate firstDayOfYear = date.withDayOfYear(1);  // 2025-01-01
LocalDate lastDayOfYear = date.withDayOfYear(date.lengthOfYear()); // 2025-12-31
Edge Case - Leap Year:
    LocalDate leapFeb = LocalDate.of(2024, 2, 11);
    LocalDate lastDayLeapFeb = leapFeb.withDayOfMonth(leapFeb.lengthOfMonth());  // 2024-02-29


Java 8 - Comparing LocalDate Objects
============================================================
LocalDate date1 = LocalDate.of(2025, 5, 2);
LocalDate date2 = LocalDate.of(2025, 5, 10);
LocalDate date3 = LocalDate.of(2025, 5, 2);  // Same as date1

--Checks if date1 comes before date2
boolean isBefore = date1.isBefore(date2);  // true

--Checks if date1 comes after date2
boolean isAfter = date1.isAfter(date2); // false

--Checks if two dates are exactly equal
boolean isEqual = date1.equals(date2); // false
boolean isEqual2 = date1.equals(date3);  // true

--Compare ise compareTo
int comparison1 = date1.compareTo(date2);  // Output: -8
int comparison2 = date2.compareTo(date1);  // Output: 8
int comparison3 = date1.compareTo(date3);  // Output: 0
--Returns:
      0 if both dates are equal
      <0 if date1 is before date2
      >0 if date1 is after date2

Using equals() vs ==
---------------------------------------------
Always use equals() for date object comparison.
'==' checks reference equality, not value equality.

LocalDate a = LocalDate.of(2025, 5, 2);
LocalDate b = LocalDate.of(2025, 5, 2);
System.out.println(a == b);       // false (different objects in memory)
System.out.println(a.equals(b));  // true  (same date value)


6)Java 8 - LocalDate Leap Year, Month Length, and Year Length
============================================================
Leap Year Example:
------------------------------------------------------------
LocalDate date = LocalDate.of(2024, 2, 1);  // February in a leap year
date.lengthOfMonth()  // 29
date.lengthOfYear()   // 366
date.isLeapYear()     // true

LocalDate date2 = LocalDate.of(2023, 2, 1);  // February in a non-leap year
date2.lengthOfMonth()  // 28
date2.lengthOfYear()   // 365
date2.isLeapYear()     // false


LocalDate jan = LocalDate.of(2025, 1, 1);
LocalDate apr = LocalDate.of(2025, 4, 1);
LocalDate febLeap = LocalDate.of(2024, 2, 1);  // Leap year
LocalDate febNonLeap = LocalDate.of(2023, 2, 1); // Non-leap year
jan.lengthOfMonth()   // 31
apr.lengthOfMonth()      // 30
febLeap.lengthOfMonth()  // 29
febNonLeap.lengthOfMonth() // 28

LocalDate.of(2024, 1, 1).isLeapYear()  // true
LocalDate.of(2025, 1, 1).isLeapYear()  // false


Java 8 - Period Class (Date Difference in Years, Months, Days)
===============================================================
1) Basic Example:
------------------------------------------------------------
LocalDate start = LocalDate.of(2025, 1, 1);
LocalDate end = LocalDate.of(2025, 5, 2);
Period period = Period.between(start, end);  // Difference from start to end
period.getYears()   // 0
period.getMonths()  // 4
period.getDays()    // 1

LocalDate d1 = LocalDate.of(2020, 3, 15);
LocalDate d2 = LocalDate.of(2025, 5, 10);
Period p = Period.between(d1, d2);
p              // prints as P5Y1M25D
p.getYears()  // 5
p.getMonths()  // 1
p.getDays()    // 25

System.out.println(p);  // Output: P-5Y-1M-25D  //negative Period when d1>d2
System.out.println(p);  // Output: P5Y1M25D     //positive Period when d2>d1

//Add and Subtract period to a date
LocalDate date = LocalDate.of(2025, 5, 2);
Period period = Period.ofMonths(3);  
date.plus(period);  --Output: 2025-08-02  --Adds 3 months
date.minus(period);  --Output: 2025-02-02  --Subtracts 3 months

LocalDate start = LocalDate.of(2024, 2, 28);  // Leap year
LocalDate end = LocalDate.of(2025, 3, 1);
Period p = Period.between(start, end);
System.out.println("Years : " + p.getYears());   // 1
System.out.println("Months: " + p.getMonths());  // 0
System.out.println("Days  : " + p.getDays());    // 1
 
 
Java 8 -LocalDate and String conversion in different formats
========================================================================================================
LocalDate date = LocalDate.of(2025, 5, 3);  // Example LocalDate

--LocalDate to String(Format: yyyy-MM-dd (ISO format))
DateTimeFormatter formatter1 = DateTimeFormatter.ofPattern("dd/MM/yyyy");
String formatted1 = date.format(formatter1);     // Output: 03/05/2025(String datatype)
String ToString=date.toString();                  // Output: 03/05/2025(String datatype)

--converting back to LocalDate
LocalDate parsedDate1 = LocalDate.parse(formatted1, formatter1);  // Output: 2025-05-03(LocalDate Datatype)

--LocalDate to String Conversion(Using Constants of DateTimeFormatter)
DateTimeFormatter formatter2 = DateTimeFormatter.ISO_LOCAL_DATE;
String formatted2 = date.format(formatter2);   // Output: 2025-05-03

--converting back to LocalDate
LocalDate parsedDate2 = LocalDate.parse(formatted2, formatter2);  // Output: 2025-05-03

--LocalDate to String Conversion(EEEE, MMMM dd yyyy)
DateTimeFormatter formatter3 = DateTimeFormatter.ofPattern("EEEE, MMMM dd yyyy");
String formatted3 = date.format(formatter3);  // Output: Saturday, May 03 2025

--converting back to LocalDate
LocalDate parsedDate3 = LocalDate.parse(formatted3, formatter4);   // Output: 2025-05-03

--SOME OTHER FORMATS :
-------------------------------------------------------------------------
Pattern           | Meaning                  | Example                          
------------------|---------------------------|--------------------------
yyyy-MM-dd        | Year-Month-Day            | 2025-05-03
dd/MM/yyyy        | Day/Month/Year            | 03/05/2025
MM-dd-yyyy        | Month-Day-Year            | 05-03-2025
MMM dd, yyyy      | Short Month format        | May 03, 2025
EEEE, MMMM dd yyyy| Full Day and Month Name   | Saturday, May 03 2025

--Error Handling (Parsing Invalid Dates):
--------------------------------------------
Incorrect format example:-
  String invalidDateString = "2025-05-03";  // ISO format
  try {
      LocalDate parsedDate4 = LocalDate.parse(invalidDateString, formatter3);  // Will throw DateTimeParseException
  }catch (Exception e) {
    System.out.println("Error: " + e.getMessage());
  }

Java 8 - LocalDate and other format conversions
================================================================
LocalDate date = LocalDate.of(2025, 5, 2);

--Convert to String Using toString()
String str = date.toString();  //ISO format   // Output: 2025-05-02

--Convert to EPoch Days
long epochDay = date.toEpochDay();  // Total days since 1970-01-01  // Output: 19432 

--Convert to LocalDateTime
LocalDateTime dateTime = date.atStartOfDay();  // Sets time to 00:00  // 2025-05-02T00:00

--Convert Back to LocalDate
LocalDateTime dateTime = LocalDateTime.of(2025, 5, 2, 15, 30);
LocalDate dateFromDateTime = dateTime.toLocalDate();  // Extracts date part   // Output: 2025-05-02


--Convert to ZonedDateTime
ZonedDateTime zoned = date.atStartOfDay(ZoneId.systemDefault()); // Output: 2025-05-02T00:00+02:00[Europe/Paris]

--Convert back to LocalDate
ZonedDateTime zonedDateTime = ZonedDateTime.parse("2024-06-27T10:15:30+01:00[Europe/London]");  // 2024-06-27T10:15:30+01:00[Europe/London]
LocalDate localDate = zonedDateTime.toLocalDate();  // 2024-06-27

--convert to OffsetDateTime
OffsetDateTime offset = date.atStartOfDay().atOffset(ZoneOffset.UTC);   // Output: 2025-05-02T00:00:00Z

--Convert back LocalDate
   OffsetDateTime offsetDateTime = OffsetDateTime.parse("2024-06-27T10:15:30+02:00");   // 2024-06-27T10:15:30+02:00
   LocalDate localDate = offsetDateTime.toLocalDate();     2024-06-27

--Summary of Useful Methods:
  `toString()` ➝ ISO string format (e.g., "2025-05-02")
  `toEpochDay()` ➝ number of days since 1970-01-01
  `atStartOfDay()` ➝ converts to `LocalDateTime` at midnight
  `atStartOfDay(zone)` ➝ converts to `ZonedDateTime`
  `atStartOfDay().atOffset()` ➝ converts to `OffsetDateTime`


4)Format Tables:-
=======================

1)Date formats
------------------------------------------------------------------------------------
| Format String      | Description                              | Sample Output     |
|--------------------|------------------------------------------|-------------------|
| "yyyy-MM-dd"       | ISO standard date format                 | 2025-05-04        |
| "dd-MM-yyyy"       | Day-Month-Year format                    | 04-05-2025        |
| "MM/dd/yyyy"       | US-style Month/Day/Year format           | 05/04/2025        |
| "dd MMM yyyy"      | Day with short month name                | 04 May 2025       |
| "dd MMMM yyyy"     | Day with full month name                 | 04 May 2025       |
| "E, dd MMM yyyy"   | Short day name + date                    | Sun, 04 May 2025  |
| "EEEE, dd MMMM yyyy" | Full day name + full date              | Sunday, 04 May 2025 |
| "yyyy/MM/dd"       | Year/Month/Day with slashes              | 2025/05/04        |


2)Letter Descriptions
----------------------------------------------------------------
| Letter | Meaning                        | Example Value      |
|--------|--------------------------------|--------------------|
| y      | Year                           | 2025               |
| M      | Month (1–12) or name           | 5, 05, May         |
| d      | Day of month (1–31)            | 4, 04              |
| E      | Day of week (short)            | Sun, Mon, etc.     |
| EEEE   | Day of week (full)             | Sunday, Monday     |
| MMM    | Month name (short)             | Jan, Feb, Mar      |
| MMMM   | Month name (full)              | January, February  |

5)Java 8 - LocalDate: Constants
===============================================================================
Constant                        | Description
--------------------------------|-------------------------------------------------------
LocalDate.MIN                   | The minimum supported date, -999999999-01-01.  
                                | Example: LocalDate minDate = LocalDate.MIN;  // -999999999-01-01

LocalDate.MAX                   | The maximum supported date, 999999999-12-31.  
                                | Example: LocalDate maxDate = LocalDate.MAX;  // 999999999-12-31

LocalDate.EPOCH                 | The epoch date, 1970-01-01 (ISO-8601 standard).  
                                | Example: LocalDate epochDate = LocalDate.EPOCH;  // 1970-01-01

