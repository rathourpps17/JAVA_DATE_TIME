Java 8 - LocalDate Study Notes
=======================================================

1)Definition:
===========================================================
-LocalDate is a part of the Java 8 Date and Time API (java.time.*) and represents a date 
 without time and timezone. 
-ISO 8601 — International Organization for Standardization, Standard Number 8601

 Example: 2025-05-02(yyyy-MM-dd)   --only format that LocalDate Understands


Interfaces Implemented by LocalDate class
========================================================================

1.Serializable: Allows LocalDate objects to be serialized, enabling them to be converted into a byte stream and saved or transmitted.

2.Comparable<ChronoLocalDate>: Enables comparison between LocalDate instances and other ChronoLocalDate objects, facilitating sorting and ordering operations.

3.ChronoLocalDate: Represents a date without time-of-day or time-zone in an arbitrary chronology, intended for advanced globalization use cases.
                    Provides methods for accessing date fields (like year, month, day), adjusting the date, and converting to other date-time representations.

4.Temporal: Defines methods for manipulating and querying date-time objects, such as adding or subtracting time units and accessing specific fields.

5.TemporalAccessor: Provides methods for querying individual date-time fields, like year, month, day, etc., without modifying the underlying date-time object.

6.TemporalAdjuster:Allows for adjusting a Temporal object (like LocalDate) by applying a specific adjustment, such as finding the next Monday or the last day of the month.


2)Import:
=================================================
import java.time.LocalDate;


3)METHODS:
================================================

Java 8 - LocalDate: Creating Instances
======================================
| Method                                                | Description                             |
|-------------------------------------------------------|-----------------------------------------|
| LocalDate.now()                                       | Gets the current date                   |
| LocalDate.of(int year, int month, int dayOfMonth)     | Creates a specific date                 |
| LocalDate.parse(CharSequence text)                    | Parses a date from a string             |

Examples:
---------------------------------------------------------
LocalDate today = LocalDate.now();  -- Gets the current date based on the system's clock.
LocalDate date = LocalDate.of(2025, 5, 2);  --Creates a date for May 2, 2025.
LocalDate parsed = LocalDate.parse("2025-05-02");  --Parses the date string into a LocalDate (ISO format: yyyy-MM-dd).

2) Getting Date Components:
=============================================
LocalDate date = LocalDate.of(2025, 5, 2);
date.getYear();        // 2025
date.getMonth();       // MAY
date.getMonthValue();  // 5
date.getDayOfMonth();  // 2
date.getDayOfWeek();   // FRIDAY
date.lengthOfMonth();  // 31
date.getDayOfYear()    //122


3)Java 8 - LocalDate Operations (Add / Subtract Dates)
====================================================
LocalDate today = LocalDate.now();  // Current date (e.g., 2025-05-03)

String todayDate=today.toString();  //2025-05-03 (String)

LocalDate tomorrow = today.plusDays(1);      // Add 1 day to today
LocalDate nextWeek = today.plusWeeks(1);     // Add 1 week to today
LocalDate nextMonth = today.plusMonths(1);   // Add 1 month to today
LocalDate nextYear = today.plusYears(1);     // Add 1 year to today

LocalDate yesterday = today.minusDays(1);      // Subtract 1 day from today
LocalDate lastWeek = today.minusWeeks(1);      // Subtract 1 week from today
LocalDate lastMonth = today.minusMonths(1);    // Subtract 1 month from today
LocalDate lastYear = today.minusYears(1);      // Subtract 1 year from today

LocalDate today = LocalDate.of(2025, 5, 2);
LocalDate newDate = today.withDayOfMonth(15);   // 2025-05-15
LocalDate newDate = today.withMonth(12);    // 2025-12-02
LocalDate newDate = today.withYear(2023);   // 2023-05-02


4)Java 8 - LocalDate Formatting using DateTimeFormatter/ Parsing LocalDate To String and ViceVersa
========================================================================================================
1) Formatting and Parsing Example:
----------------------------------------------------------------------------------------------------
LocalDate date = LocalDate.of(2025, 5, 3);  // Example LocalDate

// Format: dd/MM/yyyy
DateTimeFormatter formatter1 = DateTimeFormatter.ofPattern("dd/MM/yyyy");
String formatted1 = date.format(formatter1);  
System.out.println("Formatted Date (dd/MM/yyyy): " + formatted1);  // Output: 03/05/2025

// Parse formatted string back to LocalDate
LocalDate parsedDate1 = LocalDate.parse(formatted1, formatter1);  
System.out.println("Parsed LocalDate: " + parsedDate1);  // Output: 2025-05-03

// Format: yyyy-MM-dd (ISO format)
DateTimeFormatter formatter2 = DateTimeFormatter.ISO_LOCAL_DATE;
String formatted2 = date.format(formatter2);  
System.out.println("Formatted Date (yyyy-MM-dd): " + formatted2);  // Output: 2025-05-03

// Parse back from ISO format
LocalDate parsedDate2 = LocalDate.parse(formatted2, formatter2);  
System.out.println("Parsed LocalDate: " + parsedDate2);  // Output: 2025-05-03

// Format: EEEE, MMMM dd yyyy
DateTimeFormatter formatter3 = DateTimeFormatter.ofPattern("EEEE, MMMM dd yyyy");
String formatted3 = date.format(formatter3);  
System.out.println("Formatted Date (Full Day and Month Name): " + formatted3);  // Output: Saturday, May 03 2025

// Parse back from the full date format
DateTimeFormatter formatter4 = DateTimeFormatter.ofPattern("EEEE, MMMM dd yyyy");
LocalDate parsedDate3 = LocalDate.parse(formatted3, formatter4);  
System.out.println("Parsed LocalDate: " + parsedDate3);  // Output: 2025-05-03

Error Handling (Parsing Invalid Dates):
-----------------------------------------------------------------------------------------------------------
// Incorrect format example
String invalidDateString = "2025-05-03";  // ISO format

try {
    LocalDate parsedDate4 = LocalDate.parse(invalidDateString, formatter3);  // Will throw DateTimeParseException
} catch (Exception e) {
    System.out.println("Error: " + e.getMessage());
}

Common Patterns:
---------------------------------------------------------------------------------------
Pattern           | Meaning                  | Example
------------------|---------------------------|-------------------
yyyy-MM-dd        | Year-Month-Day            | 2025-05-03
dd/MM/yyyy        | Day/Month/Year            | 03/05/2025
MM-dd-yyyy        | Month-Day-Year            | 05-03-2025
MMM dd, yyyy      | Short Month format        | May 03, 2025
EEEE, MMMM dd yyyy| Full Day and Month Name   | Saturday, May 03 2025


5)Java 8 - Comparing LocalDate Objects
============================================================
Create sample dates:
------------------------------------------------------
LocalDate date1 = LocalDate.of(2025, 5, 2);
LocalDate date2 = LocalDate.of(2025, 5, 10);
LocalDate date3 = LocalDate.of(2025, 5, 2);  // Same as date1

// Checks if date1 comes before date2
boolean isBefore = date1.isBefore(date2);
System.out.println("Is date1 before date2? " + isBefore);  // true

// Checks if date1 comes after date2
boolean isAfter = date1.isAfter(date2);
System.out.println("Is date1 after date2? " + isAfter);  // false

// Checks if two dates are exactly equal
boolean isEqual = date1.equals(date2);
System.out.println("Is date1 equal to date2? " + isEqual);  // false

boolean isEqual2 = date1.equals(date3);
System.out.println("Is date1 equal to date3? " + isEqual2);  // true

int comparison1 = date1.compareTo(date2);
System.out.println("date1 compared to date2: " + comparison1);  // Output: -8

int comparison2 = date2.compareTo(date1);
System.out.println("date2 compared to date1: " + comparison2);  // Output: 8

int comparison3 = date1.compareTo(date3);
System.out.println("date1 compared to date3: " + comparison3);  // Output: 0

// Returns:
//   0 if both dates are equal
//  <0 if date1 is before date2
//  >0 if date1 is after date2

Using equals() vs ==
-----------------------------------------------------------
// Always use equals() for date object comparison.
// '==' checks reference equality, not value equality.

LocalDate a = LocalDate.of(2025, 5, 2);
LocalDate b = LocalDate.of(2025, 5, 2);

System.out.println(a == b);       // false (different objects in memory)
System.out.println(a.equals(b));  // true  (same date value)

6)Java 8 - LocalDate Leap Year, Month Length, and Year Length
============================================================
Leap Year Example:
------------------------------------------------------------
LocalDate date = LocalDate.of(2024, 2, 1);  // February in a leap year
date.lengthOfMonth()  // 29
date.lengthOfYear()   // 366
date.isLeapYear()     // true

LocalDate date2 = LocalDate.of(2023, 2, 1);  // February in a non-leap year
date2.lengthOfMonth()  // 28
date2.lengthOfYear()   // 365
date2.isLeapYear()     // false


LocalDate jan = LocalDate.of(2025, 1, 1);
LocalDate apr = LocalDate.of(2025, 4, 1);
LocalDate febLeap = LocalDate.of(2024, 2, 1);  // Leap year
LocalDate febNonLeap = LocalDate.of(2023, 2, 1); // Non-leap year
jan.lengthOfMonth()   // 31
apr.lengthOfMonth()      // 30
febLeap.lengthOfMonth()  // 29
febNonLeap.lengthOfMonth() // 28

LocalDate.of(2024, 1, 1).isLeapYear()  // true
LocalDate.of(2025, 1, 1).isLeapYear()  // false


Java 8 - Period Class (Date Difference in Years, Months, Days)
===============================================================
1) Basic Example:
------------------------------------------------------------
LocalDate start = LocalDate.of(2025, 1, 1);
LocalDate end = LocalDate.of(2025, 5, 2);
Period period = Period.between(start, end);  // Difference from start to end
period.getYears()   // 0
period.getMonths()  // 4
period.getDays()    // 1

LocalDate d1 = LocalDate.of(2020, 3, 15);
LocalDate d2 = LocalDate.of(2025, 5, 10);
Period p = Period.between(d1, d2);
p              // prints as P5Y1M25D
p.getYears()  // 5
p.getMonths()  // 1
p.getDays()    // 25
System.out.println(p);  // Output: P-5Y-1M-25D  //negative Period when d1>d2
System.out.println(p);  // Output: P5Y1M25D     //positive Period when d2>d1

// A constant for a zero-length period
Period zero = Period.ZERO;
zero  --Output: P0D

//Add and Subtract period to a date
LocalDate date = LocalDate.of(2025, 5, 2);
Period period = Period.ofMonths(3);  
date.plus(period);  --Output: 2025-08-02  --Adds 3 months
date.minus(period);  --Output: 2025-02-02  --Subtracts 3 months


5) Creating Periods Manually:
------------------------------------------------------------

Period oneYear = Period.ofYears(1);
Period threeMonths = Period.ofMonths(3);
Period weeksNotSupported = Period.ofWeeks(2);  // Converts to 14 days
Period mixed = Period.of(1, 2, 15);  // 1 year, 2 months, 15 days

System.out.println("Mixed Period: " + mixed);  // Output: P1Y2M15D


6) Period.toString() Output Format:
------------------------------------------------------------

Period p = Period.of(1, 6, 10);
System.out.println(p);  // Output: P1Y6M10D

7) Edge Cases:
------------------------------------------------------------

LocalDate start = LocalDate.of(2024, 2, 28);  // Leap year
LocalDate end = LocalDate.of(2025, 3, 1);

Period p = Period.between(start, end);
System.out.println("Years : " + p.getYears());   // 1
System.out.println("Months: " + p.getMonths());  // 0
System.out.println("Days  : " + p.getDays());    // 1

Java 8 - Getting First and Last Day of Month using LocalDate
=============================================================
1) Setup a Sample Date:
------------------------------------------------------------
LocalDate date = LocalDate.of(2025, 5, 2);  // May 2, 2025

2) First Day of Month:
------------------------------------------------------------
LocalDate firstDayOfMonth = date.withDayOfMonth(1);

System.out.println("First Day of Month: " + firstDayOfMonth);  // 2025-05-01

3) Last Day of Month:
------------------------------------------------------------
LocalDate lastDayOfMonth = date.withDayOfMonth(date.lengthOfMonth());

System.out.println("Last Day of Month: " + lastDayOfMonth);  // 2025-05-31

4) First and Last Day of Year:
------------------------------------------------------------
LocalDate firstDayOfYear = date.withDayOfYear(1);
System.out.println("First Day of Year: " + firstDayOfYear);  // 2025-01-01

LocalDate lastDayOfYear = date.withDayOfYear(date.lengthOfYear());
System.out.println("Last Day of Year: " + lastDayOfYear);    // 2025-12-31

5) Edge Case - Leap Year:
------------------------------------------------------------
LocalDate leapFeb = LocalDate.of(2024, 2, 11);

LocalDate lastDayLeapFeb = leapFeb.withDayOfMonth(leapFeb.lengthOfMonth());
System.out.println("Last Day of Feb 2024: " + lastDayLeapFeb);  // 2024-02-29

6) General Tip:
------------------------------------------------------------
// date.withDayOfMonth(1) → always gives the first day of month
// date.lengthOfMonth() → gives total number of days in that month


Java 8 - Converting LocalDate to Other Formats (Essential Only)
================================================================

1) Using toString() Method:
------------------------------------------------------------
LocalDate date = LocalDate.of(2025, 5, 2);
String str = date.toString();  // ISO format

System.out.println("Date String: " + str);  // Output: 2025-05-02

2) Convert to Epoch Days:
------------------------------------------------------------

long epochDay = date.toEpochDay();  // Total days since 1970-01-01
System.out.println("Epoch Days: " + epochDay); // Output: 19432


3) Convert LocalDate to LocalDateTime:
------------------------------------------------------------

LocalDateTime dateTime = date.atStartOfDay();  // Sets time to 00:00
System.out.println("LocalDateTime: " + dateTime);  // 2025-05-02T00:00

4) Convert to ZonedDateTime / OffsetDateTime:
------------------------------------------------------------
ZonedDateTime zoned = date.atStartOfDay(ZoneId.systemDefault());
OffsetDateTime offset = date.atStartOfDay().atOffset(ZoneOffset.UTC);

System.out.println("ZonedDateTime : " + zoned);  // Output: 2025-05-02T00:00+02:00[Europe/Paris]
System.out.println("OffsetDateTime: " + offset);  // Output: 2025-05-02T00:00:00Z

5) Get LocalDate from LocalDateTime:
------------------------------------

LocalDateTime dateTime = LocalDateTime.of(2025, 5, 2, 15, 30);
LocalDate dateFromDateTime = dateTime.toLocalDate();  // Extracts date part

System.out.println("LocalDate from LocalDateTime: " + dateFromDateTime);  // Output: 2025-05-02

Summary of Useful Methods:
------------------------------------------------------------
- `toString()` ➝ ISO string format (e.g., "2025-05-02")
- `toEpochDay()` ➝ number of days since 1970-01-01
- `atStartOfDay()` ➝ converts to `LocalDateTime` at midnight
- `atStartOfDay(zone)` ➝ converts to `ZonedDateTime`
- `atStartOfDay().atOffset()` ➝ converts to `OffsetDateTime`


4)Format Tables:-
=======================

1)Date formats
------------------------------------------------------------

| Format String      | Description                              | Sample Output     |
|--------------------|------------------------------------------|-------------------|
| "yyyy-MM-dd"       | ISO standard date format                 | 2025-05-04        |
| "dd-MM-yyyy"       | Day-Month-Year format                    | 04-05-2025        |
| "MM/dd/yyyy"       | US-style Month/Day/Year format           | 05/04/2025        |
| "dd MMM yyyy"      | Day with short month name                | 04 May 2025       |
| "dd MMMM yyyy"     | Day with full month name                 | 04 May 2025       |
| "E, dd MMM yyyy"   | Short day name + date                    | Sun, 04 May 2025  |
| "EEEE, dd MMMM yyyy" | Full day name + full date              | Sunday, 04 May 2025 |
| "yyyy/MM/dd"       | Year/Month/Day with slashes              | 2025/05/04        |


2)Letter Descriptions
----------------------------------------------------------------------

| Letter | Meaning                        | Example Value      |
|--------|--------------------------------|--------------------|
| y      | Year                           | 2025               |
| M      | Month (1–12) or name           | 5, 05, May         |
| d      | Day of month (1–31)            | 4, 04              |
| E      | Day of week (short)            | Sun, Mon, etc.     |
| EEEE   | Day of week (full)             | Sunday, Monday     |
| MMM    | Month name (short)             | Jan, Feb, Mar      |
| MMMM   | Month name (full)              | January, February  |

5)Java 8 - LocalDate: Constants
===============================================================================

Constant                        | Description
--------------------------------|-------------------------------------------------------
LocalDate.MIN                   | The minimum supported date, -999999999-01-01.  
                                | Example: LocalDate minDate = LocalDate.MIN;  // -999999999-01-01

LocalDate.MAX                   | The maximum supported date, 999999999-12-31.  
                                | Example: LocalDate maxDate = LocalDate.MAX;  // 999999999-12-31

LocalDate.EPOCH                 | The epoch date, 1970-01-01 (ISO-8601 standard).  
                                | Example: LocalDate epochDate = LocalDate.EPOCH;  // 1970-01-01

